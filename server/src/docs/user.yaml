paths:
  /api/user:
    get:
      tags: [User]
      summary: Récupérer tous les utilisateurs
      responses:
        '200':
          description: Liste des utilisateurs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: Aucun utilisateur trouvé

    post:
      tags: [User]
      summary: Ajouter un nouvel utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: Utilisateur créé
        '400':
          description: Requête invalide

  /api/user/connected:
    get:
      tags: [User]
      summary: Lire l'utilisateur connecté (JWT requis)
      responses:
        '200':
          description: Informations de l'utilisateur connecté
        '400':
          description: ID manquant
        '404':
          description: Utilisateur non trouvé

  /api/user/{id}:
    get:
      tags: [User]
      summary: Lire un utilisateur par son ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Utilisateur trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Accès interdit
        '404':
          description: Utilisateur non trouvé

    put:
      tags: [User]
      summary: Modifier un utilisateur par son ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Utilisateur mis à jour
        '403':
          description: Accès interdit
        '404':
          description: Utilisateur non trouvé

    delete:
      tags: [User]
      summary: Supprimer un utilisateur par son ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Utilisateur supprimé
        '403':
          description: Accès interdit
        '404':
          description: Utilisateur non trouvé

  /api/user/abonnement:
    get:
      tags: [User]
      summary: Lire tous les utilisateurs avec leurs abonnements
      responses:
        '200':
          description: Utilisateurs avec abonnement
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserWithAbonnement'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        firstname:
          type: string
        lastname:
          type: string
        mail:
          type: string
        is_admin:
          type: boolean
        is_actif:
          type: boolean
        abonnement_id:
          type: integer
        profilpicture_id:
          type: integer

    UserInput:
      type: object
      required:
        - firstname
        - lastname
        - mail
        - password
        - abonnement_id
        - profilpicture_id
      properties:
        firstname:
          type: string
        lastname:
          type: string
        mail:
          type: string
        password:
          type: string
        is_admin:
          type: boolean
        is_actif:
          type: boolean
        abonnement_id:
          type: integer
        profilpicture_id:
          type: integer

    UserUpdate:
      type: object
      required:
        - firstname
        - lastname
        - mail
      properties:
        firstname:
          type: string
        lastname:
          type: string
        mail:
          type: string
        is_admin:
          type: boolean
        is_actif:
          type: boolean
        abonnement_id:
          type: integer
        profilpicture_id:
          type: integer

    UserWithAbonnement:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            abonnement_name:
              type: string
